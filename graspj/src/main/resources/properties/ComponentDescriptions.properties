ProductionWorkflow = <p>The analysis procedure of GraspJ is organized in a modular way that we call a workflow.</p><p>A Workflow consists of three different phases during which the final result is ob-tained. Those phases are called Production, Processing and Consumption and the components working during these phases are called Producers, Processors and Consumers, respectively. Available components and their configuration are described in Chapter 4 (Components) of the User Manual.</p> 
Producers = During Production phase typically the raw data is read, sliced into pieces of suita-ble size which we refer to as packages. Those packages will later also store the list of localizations, filtering results, calculated drift and any other information created during Processing.
Processors = The second phase, Processing, consists of a number of individual components all facilitating parts of the analysis by working with an individual package at a time. Each Processor is called once per package and execution of the subsequent Processor is delayed until the predecessor is finished, maintaining the order of Processing. At the end of this phase the analysis of the individual package is finished.
Consumers = The last phase is called Consumption. Here the package is simultaneously distrib-uted to all consumer-components. Typical examples of consumers are rendering engines providing the user with the obtained image in different ways.
LiveRenderer = This component continuously renders the current result of the workflow. The ren-dering is shown in a modified ImageJ-Window allowing for zooming, panning etc.
LiveProducer = Reads the data source and splits it into packages. The analysis procedure is then done package-wise.
UseExistingProducer = Use Existing Producer
SplitExistingProducer = Split Existing Producer
SpotFilterer = Spot Filterer
SpotFitFilterer = This component filters \u201Cbad\u201D localizations based on certain criteria.
SpotFrameFilterer = This component filters localizations based on the frame in which they appeared.
FilterMerger = Filter Merger
PackageDriftCorrector = This component corrects for stage drift in x and y by rendering STORM/PALM images from subsets of frames and correlating them (intrinsic drift correction).
MLEFitter2D = This component performs the peak fitting part of the analysis.
MLEFitterFlex2D = MLE Fitter Flex 2D
MLEFitter3D = This component performs the peak fitting part of the analysis (3D data using astigmatism).
SpotRenderer = Spot Renderer
GaussianSliced3D = Gaussian Sliced3D
Gaussian2D = Gaussian 2D
GaussianColorCoded3D = Gaussian Color-Coded 3D
TrailGenerator = In a typical STORM/PALM experiment, the acquisition laser intensity is chosen such that individual fluorophores switch-off or bleach within one frame. However, some fluorophores may last longer than one frame. When the same peak appears in multiple frames, it can be trailed together and the position calculated as a weighted average of the positions in each frame. Trailing improves the localization accuracy of a given peak. The trail generator allows you to set up the parameters for linking peaks together. 
SpotFinderCL = This component is intended for facilitating the peak finding part of the analysis.
SpotFinderJava = This component is intended for facilitating the peak finding part of the analysis.
ProductMerger = This component appends the current package to the current result of the workflow.
ConsumptionPipeline = Consumption Pipeline
PipeOnShallowCopy = Pipe on Shallow-Copy
LiveRenderColor = The main functionality of this component is similar to the Live Renderer (in fact a Live Renderer is built-in to this component). It adds the functionality of filtering a copy of the spot-collection before rendering to allow for rendering of individual color-channels only. This component is based on the Continuous Workflow on Copy component.
Live3DPreview = Live 3D Preview
ShallowCopier = Shallow Copier
InjectionProducer = This component replaces the Live Producer in Continuous Workflow on Copy based components. Instead of reading the source file and creating packages for analysis, it uses a copy of the parent-workflow package and injects it into the workflow.
WorkflowOnCopy = This component can hold and run a workflow on (a copy of) the current re-sult/current package of a parent workflow. For each package delivered to the component a new workflow will be run.
ContinuousWorkflowOnCopy = This component is largely identical to Workflow on Copy. The main difference is that, instead of executing a full workflow for each package, it has one workflow running continuously while the parent workflow is running. New packages are then injected into this workflow by the Injection Producer. One application of this component is the Live Channel-Renderer which is based on the Continuous Workflow on Copy component.
