RawProductionEngine.file = Source File (must be in a raw format)
LociProductionEngine.file = Source File (must be readable by <a href="http://loci.wisc.edu/software/bio-formats">LOCI Bioformats</a>)
ImagePlusProductionEngine.stack = A stack opened in ImageJ

wizard.AnalysisTypeChooser = Analysis Type Config
wizard.AnalysisTypeChooser.dimensionality = Dimensionality of the data  
wizard.AnalysisTypeChooser.renderAllChannelImage = Render an Image with all Channels including non-specific localization (channel 9), excluding filtered-out localizations (channel 0)
wizard.AnalysisTypeChooser.renderIndividualChannels = Render Channels individually. Uses the specified frame-cycle to identify which localization belongs to which channel. Specified channels are then renderer individually. 
wizard.AnalysisTypeChooser.renderIndividualChannels.channelList = Channels
wizard.AnalysisTypeChooser.3dMulticolorPreview = 3D Multicolor Preview
wizard.AnalysisTypeChooser.numColors = Number of Channels

wizard.OptionalFeaturesChooser.trailGeneration = Trail Generation
wizard.OptionalFeaturesChooser.driftCorrection = Drift Correction
wizard.OptionalFeaturesChooser.daoStorm = DAOSTORM Algorithm implementation for multipeak detection. 
wizard.OptionalFeaturesChooser.driftCorrection.dcMethod = Method
wizard.OptionalFeaturesChooser = Optional Features

wizard.MultiSourceChooser = Data Source

LiveProducerConfig.detectEnd.interval = The time (in ms) the Live Producer waits between two consecutive attempts to load new frames.
LiveProducerConfig.detectEnd.attempts = Number of times the Live Producer attempts to load new frames before it stops the analysis.

MetaData.name = Name
MetaData.description = Description
MetaData.dateCreated = Date Created 

LiveProducerConfig.metaData = Meta Data
LiveProducerConfig.acquisitionConfig = Acquisition Config
LiveProducerConfig.productionEngine = Data Source Type
LiveProducerConfig.detectEnd = Decides whether the Live Producer will try to automatically detect the end of the acquisition (or in non-live mode the end of the file). If not selected one has to stop the analysis manually (see Running-Analysis-View).
LiveProducerConfig.framesPerPackage = This is the number of frames per one package. Setting this number too high might result in the analysis failing as the package will not fit into the GPU-RAM any-more. Setting this number too low, on the other hand, might result in low analysis speeds or impaired intrinsic drift correction. A typical number of frames per pack-age is 1024.
LiveProducerConfig = Live Producer Config

FindConfig = Find Config
FindConfig.metaData = Meta Data
FindConfig.maxSpotsPerFrame = This is the maximum number of peaks the finder will try to find inside a single frame. If this number is set too high the Java version of the Spot Finder will use up a lot of RAM and the CL version might fail due to insufficient GPU RAM available. If this number is set too low not all peaks in a given frame may be found. For a typical STORM/PALM dataset this number can be set to 1024. 
FindConfig.threshold = This is the minimum intensity count the brightest pixel of a peak must have to be considered for fitting. This value is <b>critical</b< for analysis. If this number is chosen too high not all peaks will be identified. If it is chosen too low the finder will pick up noise as peaks. This will slow down analysis and Max. Spots per Frame might be exceeded before all peaks are identified, even if the number of actual peaks within a single frame is low enough. GraspJ determines a rough estimate for the threshold from the first few frames of the data. However, the estimate is often not accurate enough to give the best results. Therefore, the user is recommended to open the data in ImageJ and determine the threshold by considering the dimmest peaks in each frame that should be included in the analysis. 
FindConfig.boxRadius = This is the \u201CRadius\u201D of the box that is drawn around the highest intensity pixel of a peak and is used to exclude overlapping peaks and peaks on the edge of a frame. The size of the square box used corresponds to2*Box Radius+1. As a rule of thumb the box radius should be set to approximately 3*\u03C3_PSF, where \u03C3_PSF is the Standard Deviation PSF.

AcquisitionConfig.metaData = Meta Data
AcquisitionConfig.frameWidth = Frame Width in pixels
AcquisitionConfig.frameHeight = Frame Height in pixels
AcquisitionConfig.bytesPerPixel = Bytes per Pixel
AcquisitionConfig.pixelSize = This is the size of one (projected) camera pixel in nm. Pixels are assumed to be squares. (Example: physical pixel size: 16µm × 16µm, using a 100x objective \uF0E0 Pixel Size \u2248 160nm).
AcquisitionConfig.countConversion = This is the factor to convert pixel intensity values to approximate photon counts. This conversion factor depends on the gain settings of the EMCCD camera and should be determined from the provided manufacturer specifications.
AcquisitionConfig.countOffset = This is the dark current count of the EMCCD camera and should be determined from the provided manufacturer specifications. It will be subtracted from the count before the conversion factor is applied.
AcquisitionConfig.frameCycle = This is the order of frames inside the source file. Enter the repetitive pattern of the acquisition. For each frame of this pattern you need to enter one digit representing the color-channel that frame belongs to. Frames can be marked as activation frames by putting square brackets around them. Example: For a two-color experiment where identical reporter dyes but two differ-ent activator dyes are used a typical frame cycle consists of: one activation frame of one color (e.g. Alexa405)  followed by three acquisition frames (e.g. Alexa647) followed by one activation frame of a second color (e.g. Cy3) and finally three acquisition frames (e.g. Alexa647). For such a frame cycle, the following pattern would be adequate: [1]199[2]299. The numbers in brackets represent the first and second activation frames, which typically are dark and contain no localizations. The 1 and 2 outside of the brackets indicate the first and second acquisition frames immediately following the activation frame. The 9 identifies non-specific localizations from the frames not immediately following the activation frame. For a detailed reference on multi-color imaging using different activators, please refer to Bates et al, Science, 317: 1749 (2007).

DriftConfig.metaData = Meta Data
DriftConfig.renderConfig = Rendering Config

SplitExistingProducerConfig.metaData = Meta Data 
SplitExistingProducerConfig.framesPerPackage = Frames per Package
SplitExistingProducerConfig.srcItem = Source Item

RenderConfig.metaData = Meta Data 
RenderConfig.renderWidth = This is the width of the window in pixels that should be used for the final rendering.
RenderConfig.renderHeight = This is the height of the window in pixels that should be used for the final rendering.
RenderConfig.pixelSize = This determines the pixel size in nm at which the image will be rendered.
RenderConfig.offsetX = This determines the shift of the rendering in nm.
RenderConfig.offsetY = This determines the shift of the rendering in nm.
RenderConfig.firstFrame = First Frame
RenderConfig.lastFrame = Last Frame
RenderConfig.spotsPerWorker = Spots per Worker
RenderConfig.intensity = This determines the intensity of the rendering of an individual localization. It\u2019s the sum of all pixel-intensities that belong to that localization.
RenderConfig.bytesPerPixel = Bytes per Pixel
RenderConfig.complex = Complex
RenderConfig.applyMask.specificChannel.channelNr = Channel Nr
RenderConfig.applyMask.specificChannel = This option allows to specifically only render localization that belong to a specific channel (defined by the Channel Nr option) and are not filtered out.
RenderConfig.applyMask = If selected, the current (filter-) mask is applied during rendering, e.g. localizations that were filtered out are not rendered.
RenderConfig.hue = Hue
RenderConfig.z = z
RenderConfig.showImage = Create and show each image the gets rendered.  

LiveRendererConfig = Live Renderer Config
LiveRendererConfig.renderer = Renderer
LiveRendererConfig.autoContrast = This is used to automatically scale the brightness/contrast of the rendered image. The brightest points correspond to those that contain the highest number of localizations.
LiveRendererConfig.metaData = Meta Data
LiveRendererConfig.pushActions = When activated, zooming and panning actions on this rendering window will be pushed to all other rendering windows within the same group specified by Group Names.
LiveRendererConfig.receiveActions = When activated, zooming and panning actions on this rendering window will be received from all other rendering windows within the same group speci-fied by Group Names.
LiveRendererConfig.pushActions.groupNames = Specifies the groups actions will be pushed to as a comma separated list.
LiveRendererConfig.receiveActions.groupNames = Specifies the groups actions will be received from as a comma separated list.


Range.min = Min
Range.max = Max

FitConfig = Fit Config
FitConfig.metaData = Meta Data
FitConfig.fitDimension = Fit Dimension
FitConfig.variablesPerDimension = Variables per Dimension
FitConfig.boxRadius = This is the \u201CRadius\u201D of the box that is drawn around the highest intensity pixel of a peak and is used for fitting to obtain its center position. Usually this value should be chosen identical to the Box Radius of the Spot Finder JAVA/CL.
FitConfig.sigmaPSF = This is the standard deviation of the Gaussian approximation to the Point-Spread-Function of your microscope in pixels.
FitConfig.iterations = This is the number of iterations run while fitting each peak. The higher the number the closer the fit result will be to the MLE, but the analysis speed will go down.

MLE3DConfig.metaData = Meta Data
MLE3DConfig.fitDimension = Fit Dimension
MLE3DConfig.variablesPerDimension = Variables per Dimension
MLE3DConfig.boxRadius = Box Radius
MLE3DConfig.sigmaPSF = Standard Deviation PSF
MLE3DConfig.iterations = Iterations
MLE3DConfig.dfCurveX = The z-position of fluorophores is determined based on the astigmatism of the PSF in 3D data. The astigmatism is compared to a calibration curve in order to deter-mine the z-position. The calibration curve must be obtained by immobilizing single fluorophores or fluorescent beads on the surface of a cover glass, and scanning a precision piezo stage in z (for example for a range of +600 to -600 nm). The peaks in this calibration dataset must be identified and the x and y widths of the PSF must be determined in each frame. This analysis allows one to plot a calibration curve (x- and y-widths of the PSF as a function of z-height). This calibration curve can then be fit to a \u201Cdefocusing\u201D curve to determine the parameters needed for the 3D analysis. For more details on astigmatic 3D super-resolution imaging please refer to Huang et al., Science 319: 810 (2008). More details on the 3D calibration parameters used in GraspJ can be found in Smith et al., Nature Methods, 7: 373 (2010).
MLE3DConfig.dfCurveY = The z-position of fluorophores is determined based on the astigmatism of the PSF in 3D data. The astigmatism is compared to a calibration curve in order to deter-mine the z-position. The calibration curve must be obtained by immobilizing single fluorophores or fluorescent beads on the surface of a cover glass, and scanning a precision piezo stage in z (for example for a range of +600 to -600 nm). The peaks in this calibration dataset must be identified and the x and y widths of the PSF must be determined in each frame. This analysis allows one to plot a calibration curve (x- and y-widths of the PSF as a function of z-height). This calibration curve can then be fit to a \u201Cdefocusing\u201D curve to determine the parameters needed for the 3D analysis. For more details on astigmatic 3D super-resolution imaging please refer to Huang et al., Science 319: 810 (2008). More details on the 3D calibration parameters used in GraspJ can be found in Smith et al., Nature Methods, 7: 373 (2010).

FitFilterConfig.metaData = Meta Data
FitFilterConfig.x = x
FitFilterConfig.y = y
FitFilterConfig.z = z
FitFilterConfig.I = Intensity
FitFilterConfig.B = Background
FitFilterConfig.applyMask = If this option is selected, the obtained filter mask is permanently applied to the Spot-Collection, i.e. bad localizations are deleted.
FitFilterConfig = Fit-Filter Config

FitVariable.value = Value
FitVariable.uncertainty = Uncertainty

FrameFilterConfig.metaData = Meta Data
FrameFilterConfig.filterByColor = If selected, all localizations that do not belong to specified channel are filtered out.
FrameFilterConfig.filterByType = If selected, all localizations that are not of the selected type (activation/acquisition) are filtered out.
FrameFilterConfig.encodeColor = If selected, the channel number, determined from the Frame Cycle, will be saved in the filter mask.
FrameFilterConfig.filterByColor.color = Channel
FrameFilterConfig.filterByType.isActivation = Is Activation Frame?
FrameFilterConfig.applyMask = If this option is selected, the obtained filter mask is permanently applied to the Spot-Collection, i.e. bad localizations are deleted.
FrameFilterConfig.combinationMode = Determines whether previously existing filter masks are overridden oder multiplied with the new mask.
FrameFilterConfig = Frame-Filter Config

metaData = Meta Data

TrailConfig.metaData = Meta Data
TrailConfig.locationTolerance = Location Tolerance
TrailConfig.locationToleranceNM = This value determines how far the position of two peaks can be separated from one another in subsequent frames to be still considered the same peak. The value is set in nm.
TrailConfig.frameSkipTolerance = This value determines the number of frames that a peak can disappear in between frames to still be considered as the same peak. Typically trailing is done only for peaks that continuously appear in subsequent frames and therefore this value is set to zero.
TrailConfig.maxTrailLength = This value determines the maximum number of frames that can be trailed together. Typically this value is set to be equal to the length of the acquisi-tion frames in a cycle (e.g. 3).
TrailConfig.minTrailLength = This value determines the minimum number of frames that can be trailed together. Typically this value is set to 0.

PipeOnShallowCopy.metaData = Meta Data
PipeOnShallowCopy.newSpotCollection = New Spot Collection
PipeOnShallowCopy.newMask = New Mask
PipeOnShallowCopy.newDrift = New Drift

AnalysisItemConfig.metaData = Meta Data

UserConfig.userWorkflowsOnExistent = Favorite Workflows

AnalysisItemView.config = Result
AnalysisItemView.config.metaData = Meta Data
AnalysisItemView.config.resultSummary = Summary
AnalysisItemView.config.acquisitionConfig = Acquisition Config
AnalysisItemView.config.notes = Other

AnalysisItem.ResultSummary.spotCount = Number of Localizations
AnalysisItem.ResultSummary.positiveMaskCount = Localizations after Filtering
AnalysisItem.ResultSummary.avgLocalizationPrecision = Average localization precision of filtered spots (x,y,z) in nm.
AnalysisItem.Notes.attachedWorkflows = Attached Workflows

UserConfig = Settings
MetaData = Meta Data
AnalysisItem.ResultSummary = Result Summary
AcquisitionConfig = Acquisition Config
AnalysisItem.Notes = Notes


SplitExistingProducerConfig.splitByFrame.framesPerPackage = Frames per Package
SplitExistingProducerConfig.splitByFrame = Split by Frame
SplitExistingProducerConfig = Split Existing Producer Config

ProductionWorkflowConfig.metaData = Meta Data
ProductionWorkflowConfig.acquisitionConfig = Acquisition Config
ProductionWorkflowConfig = Production Workflow Config

RawProductionEngine.frameWidth = Width of a frame in pixels
RawProductionEngine.frameHeight = Height of a frame in pixels
RawProductionEngine.bytesPerPixel = Bytes used to represent a single pixel (e.g. 2 bytes for a 16-bit image)



TrailConfig = Trail Config
RenderConfig = Render Config
DriftConfig = Drift Config

WorkflowOnCopy.metaData = Meta Data
WorkflowOnCopy.copyInstructionsProduct.newSpotCollection.copyOrgData = If this option is selected, the newly created Spot-Collection/Mask/Drift is filled with a copy of the original data. If you select this option for all three parts (Spots/Mask/Drift), you will end up with a deep-copy of the result/package. Changes to that copy will not affect the original.
WorkflowOnCopy.copyInstructionsProduct.newSpotCollection = If this option is selected the spot-collection is replaced with a new one.
WorkflowOnCopy.copyInstructionsProduct.newMask.copyOrgData = If this option is selected, the newly created Mask is filled with a copy of the original data. If you select this option for all three parts (Spots/Mask/Drift), you will end up with a deep-copy of the result/package. Changes to that copy will not affect the original.
WorkflowOnCopy.copyInstructionsProduct.newMask = If this option is selected the mask is replaced with a new one.
WorkflowOnCopy.copyInstructionsProduct.newDrift.copyOrgData = If this option is selected, the newly created Drift is filled with a copy of the original data. If you select this option for all three parts (Spots/Mask/Drift), you will end up with a deep-copy of the result/package. Changes to that copy will not affect the original.
WorkflowOnCopy.copyInstructionsProduct.newDrift = If this option is selected the drift is replaced with a new one.
WorkflowOnCopy.copyInstructionsProduct = If selected, the workflow uses a copy of the current result of the parent workflow. A copy in this sense refers to a shallow copy, which means that without further configuration the spot-collection, the mask and the drift are still identical to the original ones (i.e. changes made to the result/package on this workflow affect the result/package on the parent workflow). However, the result/package itself is a copy, which means that you can replace the spot-collection/mask/drift with a different one without affecting the parent-workflow result.
WorkflowOnCopy.copyInstructionsItem.newSpotCollection.copyOrgData = If this option is selected, the newly created Spot-Collection/Mask/Drift is filled with a copy of the original data. If you select this option for all three parts (Spots/Mask/Drift), you will end up with a deep-copy of the result/package. Changes to that copy will not affect the original.
WorkflowOnCopy.copyInstructionsItem.newSpotCollection = If this option is selected the spot-collection is replaced with a new one.
WorkflowOnCopy.copyInstructionsItem.newMask.copyOrgData = If this option is selected, the newly created Mask is filled with a copy of the original data. If you select this option for all three parts (Spots/Mask/Drift), you will end up with a deep-copy of the result/package. Changes to that copy will not affect the original.
WorkflowOnCopy.copyInstructionsItem.newMask = If this option is selected the mask is replaced with a new one.
WorkflowOnCopy.copyInstructionsItem.newDrift.copyOrgData = If this option is selected, the newly created Drift is filled with a copy of the original data. If you select this option for all three parts (Spots/Mask/Drift), you will end up with a deep-copy of the result/package. Changes to that copy will not affect the original.
WorkflowOnCopy.copyInstructionsItem.newDrift = If this option is selected the drift is replaced with a new one.
WorkflowOnCopy.copyInstructionsItem = If selected, the workflow uses a copy of the current package of the parent workflow. A copy in this sense refers to a shallow copy, which means that without further configuration the spot-collection, the mask and the drift are still identical to the original ones (i.e. changes made to the result/package on this workflow affect the result/package on the parent workflow). However, the result/package itself is a copy, which means that you can replace the spot-collection/mask/drift with a different one without affecting the parent-workflow package.
WorkflowOnCopy = Workflow On Copy

devices = Devices

UserConfig.clSystem = OpenCL System